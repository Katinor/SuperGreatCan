/*
  Copyright (C) 2009 Sung Ho Park
  Contact: ubinos.org@gmail.com

  This file is part of the exe_helloworld component of the Ubinos.

  GNU General Public License Usage
  This file may be used under the terms of the GNU
  General Public License version 3.0 as published by the Free Software
  Foundation and appearing in the file license_gpl3.txt included in the
  packaging of this file. Please review the following information to
  ensure the GNU General Public License version 3.0 requirements will be
  met: http://www.gnu.org/copyleft/gpl.html.

  GNU Lesser General Public License Usage
  Alternatively, this file may be used under the terms of the GNU Lesser
  General Public License version 2.1 as published by the Free Software
  Foundation and appearing in the file license_lgpl.txt included in the
  packaging of this file. Please review the following information to
  ensure the GNU Lesser General Public License version 2.1 requirements
  will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.

  Commercial Usage
  Alternatively, licensees holding valid commercial licenses may
  use this file in accordance with the commercial license agreement
  provided with the software or, alternatively, in accordance with the
  terms contained in a written agreement between you and rightful owner.
*/

/* -------------------------------------------------------------------------
	Include
 ------------------------------------------------------------------------- */
#include "../ubiconfig.h"

// standard c library include
#include <stdio.h>
#include <sam4e.h>
#include <stdint.h>
#include "sam4e16e.h"
// ubinos library include
#include "itf_ubinos/itf/bsp.h"
#include "itf_ubinos/itf/ubinos.h"
// chipset driver include
#include "spi/spi.h"
#include "pio/pio.h"
#include "sam4e16e.h"
#include "ioport.h"
#include "sam_gpio/sam_gpio.h"
// new estk driver include
#include "lib_new_estk_api/itf/new_estk_led.h"
#include "lib_new_estk_api/itf/new_estk_glcd.h"
#include "../../../../kernel/driver/lib_new_estk_api/itf/new_estk_ioport_set.h"
#include "../../../../kernel/porting/lib_sam4e/sam/boards/sam4e_ek/sam4e_ek.h"

#include "../../lib_IRBoard/itf/lib_IRBoard.h"

/* -------------------------------------------------------------------------
	Global variables
 ------------------------------------------------------------------------- */

IR ir;

/* ir_task는 ir_command와 ir_num변수를 확인하여 동작을 실시함.
 * 즉, 만약 ir board가 5번 ired에서 신호를 보내길 원한다면
 * set_ir_command(IR_TRANS_COMMAND, 5)와 같이 작성하면 됨.
 * 전부 보내고 싶을 때는
 * set_ir_command(IR_TRANS_ALL_COMMAND, 0)와 같이 작성할 것.
 * IR_TRANS_COMMAND를 제외한 나머지 코맨드에는 뒷자리의 숫자가 의미 없음.
 */
static int ir_command = IR_RECEIVE_COMMAND;
static int ir_number = 0;


/* -------------------------------------------------------------------------
	Prototypes
 ------------------------------------------------------------------------- */

static void IrTask(void * arg);

/* -------------------------------------------------------------------------
	Function Definitions
 ------------------------------------------------------------------------- */
int usrmain(int argc, char * argv[]) {
	int r;

	printf("\n\n\n\r");
	printf("================================================================================\n\r");
	printf("exe_sora_IRboard_test (build time: %s %s)\n\r", __TIME__, __DATE__);
	printf("================================================================================\n\r");

	r = task_create(NULL, IrTask, NULL, task_getmiddlepriority(), 256, "root");
	if (0 != r) {
		logme("fail at task_create\r\n");
	}

	glcd_init();
	ubik_comp_start();

	return 0;
}

static void IrTask(void * arg) {
	ir_spi_init();
	for (;;) {
		set_ir_command(IR_TRANS_ALL_COMMAND,0,&ir_command,&ir_number);
		switch(ir_command){
		case IR_TRANS_COMMAND:
			send_ir_command(ir_command, ir_number,&ir_command,&ir);
			break;
		case IR_TRANS_ALL_COMMAND:
			send_ir_command(ir_command, 0,&ir_command,&ir);
			break;
		case IR_RECEIVE_COMMAND:
			send_ir_command(ir_command, 0,&ir_command,&ir);
			break;
		case IDLE_COMMAND :
			break;
		}
		task_sleep(200);
	}
}

