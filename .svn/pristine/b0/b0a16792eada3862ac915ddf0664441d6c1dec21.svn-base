/*
 * mainController.c
 *
 *  Created on: 2015. 7. 30.
 *      Author: jaegeun
 */

/* -------------------------------------------------------------------------
	Include
 ------------------------------------------------------------------------- */

#include "../ubiconfig.h"

// standard c library include
#include <stdio.h>
#include <string.h>
#include <sam4e.h>

// ubinos library include
#include "itf_ubinos/itf/bsp.h"
#include "itf_ubinos/itf/ubinos.h"
#include "itf_ubinos/itf/ubik_sem.h"
#include "itf_ubinos/itf/ubik_signal.h"
#include "itf_ubinos/itf/ubik_msgq.h"
#include "itf_ubinos/itf/ubik_task.h"

// new estk driver include
#include "lib_new_estk_api/itf/new_estk_led.h"
#include "lib_new_estk_api/itf/new_estk_glcd.h"

// custom library header file include
#include "../../lib_IBU/itf/lib_IBU.h"
#include "../../lib_ata5279c/itf/lib_ata5279c.h"
#include "../../lib_sora_support/itf/lib_sora_support.h"
#include "../../lib_sora_support/itf/lib_sora_lf_service_manager.h"

#include "../../lib_motor_controller/itf/lib_sora_motor_drive.h"
#include "../../lib_motor_controller/itf/lib_motor_controller.h"
#include "../../lib_motor_controller/itf/lib_speed_configuration.h"

// user header file include
#include "../hdr/sora_config.h"

/* -------------------------------------------------------------------------
	Local Prototypes
 ------------------------------------------------------------------------- */
static void main_controller(void * arg);		// main controller task
static void processing_recieved_ble_cmd(void * arg);	// processing_recieved_ble_cmd
void reset_g_variables( void ); 				// reset global variables

// op tasks
static void op_tasks_waitingUsr(void * arg);	// op task waiting for user
static void op_tasks_searchingUsr(void *arg);	// op task searching user
static void op_tasks_waitingForCmd(void *arg);	// op task waiting for main opeartion command
static void op_tasks_usrFollowing(void * arg);	// op task following user
static void op_tasks_lfSampling(void * arg);	// op task lf data sampling

// op function
main_op_t get_main_operation(main_cmd_t op_cmd, main_op_t pre_op);// get next operation from current cmd and pre operation
void op_tasks_strInit( void );					// op tasks structre init
void op_tasks_delete( void );					// delete activated operation tasks function
void op_tasks_create( main_op_t op );			// op task create function
void op_task_end( op_tasks_idx_t task_idx );	// task end indication --- must do it
void op_tasks_switching( void );				// task switching fuction to reset g_value and delete pre op's tasks

// in lf sample function
int get_average_dis(int *aDis, uint8_t size);	// get average dis in size of sampling number
int get_average_dir(int *aDir, uint8_t size);	// get average dir in size of sampling number
int get_average_speed(int *aDis, uint8_t size);	// get average speed in size of sampling number

/* -------------------------------------------------------------------------
	Global variables
 ------------------------------------------------------------------------- */
msgq_pt _main_op_msgq = NULL;		// main controller operation trigger signal
msgq_pt _bleGestureMsgq = NULL;				// gesture cmd from PAAR
sem_pt _usr_isHere_sem = NULL;				// to pass user check seq, semapore
msgq_pt _lfsensingMsgq = NULL;				// lf sampling ok msgq with dis, dir
sem_pt _first_sampling_ok_sem = NULL;		// first contiuous smapling ok sem, lf sampling -> following

// user location data
int _g_usr_distance;
int _g_usr_direction;
int _g_usr_speed;

// op tasks
OP_TASKS op_tasks[OP_TASK_NUM];					// structure of op tasks which includes task_pt, task_func
// task functions for main operation , to register task function to op_task structure , must insert func into arr_op_tasks
taskfunc_ft arr_op_tasks[OP_TASK_NUM] = {op_tasks_waitingUsr, op_tasks_lfSampling, op_tasks_usrFollowing, \
											op_tasks_searchingUsr, op_tasks_waitingForCmd, NULL, NULL, NULL};

/* -------------------------------------------------------------------------
	Extern
 ------------------------------------------------------------------------- */

const unsigned char cmd_none[] = {MAIN_CMD_NONE};
const unsigned char cmd_svc_start[] = {MAIN_CMD_SVC_START};
const unsigned char cmd_usr_here_ok[] = {MAIN_CMD_USR_HERE_OK};
const unsigned char cmd_usr_search_ok[] = {MAIN_CMD_USR_SEARCH_OK};
const unsigned char cmd_search_fail[] = {MAIN_CMD_USR_SEARCH_FAIL};
const unsigned char cmd_following[] = {MAIN_CMD_FOLLOWING};
const unsigned char cmd_leading[] = {MAIN_CMD_LEADING};
const unsigned char cmd_remote[] = {MAIN_CMD_REMOTE};
const unsigned char cmd_emergency_rc[] = {MAIN_CMD_EMERGENCY_RC_MODE};
const unsigned char cmd_exit_emergency[] = {MAIN_CMD_EXIT_EMERGENCY};
const unsigned char cmd_cancel[] = {MAIN_CMD_CANCEL};

/* -------------------------------------------------------------------------
	Function Definitions
 ------------------------------------------------------------------------- */

void op_cmd_send(unsigned char *msg)
{
	msgq_send(_main_op_msgq, msg);
}

void ble_gestureCmd_send(unsigned char *msg)
{
	msgq_send(_bleGestureMsgq, msg);
}

void usr_isHere_sem_give( void )
{
	sem_give(_usr_isHere_sem);
}

void lf_sampling_send(unsigned char * msg)
{
	msgq_send(_lfsensingMsgq, msg);
}

void reset_g_variables( void )
{
	_g_usr_distance = 0;
	_g_usr_direction = 0;
	_g_usr_speed = 0;
}

void op_tasks_strInit( void )
{
	int i;

	for(i=0; i<OP_TASK_NUM; i++)
	{
		op_tasks[i].ptask = NULL;
		op_tasks[i].func = arr_op_tasks[i];
	}
}

void op_tasks_switching( void )
{
	reset_g_variables();		// reset global variables
	op_tasks_delete();			// delete activated operation tasks
	led_off(LED2);				// temporary,, in op user waiting...
	motor_set_speed(LINEAR_MOTION, 0, 0, 0, 0);	// robot stop! immediately
}

void op_task_end( op_tasks_idx_t task_idx )
{
	if(op_tasks[task_idx].ptask != NULL)
		task_delete(&op_tasks[task_idx].ptask);
}

main_op_t get_main_operation(main_cmd_t op_cmd, main_op_t pre_op)
{
	main_op_t next_op = OP_IDLE;

	switch(pre_op)
	{
		case OP_IDLE :
			if(op_cmd == MAIN_CMD_SVC_START)
				next_op = OP_USER_WAITING;
			else{
				next_op = OP_IDLE;
				printf("illegal command, it goes to idle mode\n\r");
			}
			break;

		case OP_USER_WAITING :
			if(op_cmd == MAIN_CMD_USR_HERE_OK)
				next_op = OP_USER_SEARCHING;
			else if(op_cmd == MAIN_CMD_CANCEL)
				next_op = OP_IDLE;
			else{
				next_op = OP_IDLE;
				printf("illegal command, it goes to idle mode\n\r");
			}
			break;

		case OP_USER_SEARCHING :
			if(op_cmd == MAIN_CMD_USR_SEARCH_OK)
				next_op = OP_CMD_WAITING;
			else if(op_cmd == MAIN_CMD_USR_SEARCH_FAIL)
				next_op = OP_USER_WAITING;
			else{
				next_op = OP_IDLE;
				printf("illegal command, it goes to idle mode\n\r");
			}
			break;

		case OP_CMD_WAITING :
			if(op_cmd == MAIN_CMD_FOLLOWING)
				next_op = OP_FOLLOWING;
			else if(op_cmd == MAIN_CMD_LEADING)
				next_op = OP_LEADING;
			else if(op_cmd == MAIN_CMD_REMOTE)
				next_op = OP_REMOTE_CONTROL;
			else if(op_cmd == MAIN_CMD_EMERGENCY_RC_MODE)
				next_op = OP_EMERGENCY_RC;
			else if(op_cmd == MAIN_CMD_CANCEL)
				next_op = OP_IDLE;
			else{
				next_op = OP_IDLE;
				printf("illegal command, it goes to idle mode\n\r");
			}
			break;

		// main operation part
		case OP_FOLLOWING :
		case OP_LEADING :
		case OP_REMOTE_CONTROL :
			if(op_cmd == MAIN_CMD_CANCEL)
				next_op = OP_CMD_WAITING;
			else if(op_cmd == MAIN_CMD_EMERGENCY_RC_MODE)
				next_op = OP_EMERGENCY_RC;
			else{
				next_op = OP_IDLE;
				printf("illegal command, it goes to idle mode\n\r");
			}
			break;

		case OP_EMERGENCY_RC :
			if(op_cmd == MAIN_CMD_EXIT_EMERGENCY)
				next_op = OP_CMD_WAITING;
			else{
				next_op = OP_IDLE;
				printf("illegal command, it goes to idle mode\n\r");
			}
			break;

		default :
			next_op = OP_IDLE;
			printf("command select error\n\r!");
			break;
	}

	return next_op;
}

void op_tasks_create( main_op_t op )
{
	int r;

	switch(op)
	{
		case OP_USER_WAITING :
			// user waiting task create
			if(op_tasks[IDX_OP_TASK_WAITING_USR].ptask == NULL)
			{
				r = task_create(&op_tasks[IDX_OP_TASK_WAITING_USR].ptask, op_tasks_waitingUsr, \
													NULL, task_getmiddlepriority(), 192, "op_tasks_waitingUsr");
				if (0 != r) {
					logme("fail at task_create\r\n");
				}
			}
			else
			{
				printf("already exist task...\n\r");
			}
			break;

		case OP_USER_SEARCHING :
			// user searching task create
			if(op_tasks[IDX_OP_TASK_SEARCHING_USR].ptask == NULL)
			{
				r = task_create(&op_tasks[IDX_OP_TASK_SEARCHING_USR].ptask, op_tasks_searchingUsr, \
													NULL, task_getmiddlepriority(), 192, "op_tasks_searchingUsr");
				if (0 != r) {
					logme("fail at task_create\r\n");
				}
			}
			else
			{
				printf("already exist task...\n\r");
			}
			break;

		case OP_CMD_WAITING :
			// command waiting task create
			if(op_tasks[IDX_OP_TASK_CMD_WAIT].ptask == NULL)
			{
				r = task_create(&op_tasks[IDX_OP_TASK_CMD_WAIT].ptask, op_tasks_waitingForCmd, \
													NULL, task_getmiddlepriority(), 192, "op_tasks_waitingForCmd");
				if (0 != r) {
					logme("fail at task_create\r\n");
				}
			}
			else
			{
				printf("already exist task...\n\r");
			}
			break;

		case OP_FOLLOWING :
			// user following task create
			if(op_tasks[IDX_OP_TASK_FOLLOWING].ptask == NULL)
			{
				r = task_create(&op_tasks[IDX_OP_TASK_FOLLOWING].ptask, op_tasks_usrFollowing, \
													NULL, task_getmiddlepriority(), 256, "op_tasks_usrFollowing");
				if (0 != r) {
					logme("fail at task_create\r\n");
				}
			}
			else
			{
				printf("already exist task...\n\r");
			}

			// LF sampling task - for user following
			if(op_tasks[IDX_OP_TASK_LF_SAMPLING].ptask == NULL)
			{
				r = task_create(&op_tasks[IDX_OP_TASK_LF_SAMPLING].ptask, op_tasks_lfSampling, \
														NULL, task_getmiddlepriority(), 512, "op_tasks_lfSampling");
				if (0 != r) {
					logme("fail at task_create\r\n");
				}
			}
			else
			{
				printf("already exist task...\n\r");
			}
			break;

		case OP_LEADING :
			break;

		case OP_REMOTE_CONTROL :
			break;

		case OP_EMERGENCY_RC :
			break;

		default :
			break;
	}
}

void op_tasks_delete( void )
{
	int i;

	for(i=0; i<OP_TASK_NUM; i++)
	{
		if(op_tasks[i].ptask != NULL)
		{
			task_delete(&op_tasks[i].ptask);
		}
	}
}

void mainControllerInit( void )
{
	int r;

// operation task structure initialize - insert tasks in task pr str
	op_tasks_strInit();

// sem create
	r = sem_create(&_usr_isHere_sem);
	if (0 != r) {
		logme("fail at sem create\r\n");
	}
	r = semb_create(&_first_sampling_ok_sem);
	if (0 != r) {
		logme("fail at sem create\r\n");
	}

// msgq create
	r = msgq_create(&_main_op_msgq, SORA_MSGQSIZE_MAX, SORA_MSGCNT_MAX);
	if (0 != r) {
		logme("fail at msgq create\r\n");
	}
	r = msgq_create(&_lfsensingMsgq, SORA_MSGQSIZE_MAX, SORA_MSGCNT_MAX);
	if (0 != r) {
		logme("fail at msgq create\r\n");
	}
	r = msgq_create(&_bleGestureMsgq, SORA_MSGQSIZE_MAX, SORA_MSGCNT_MAX);
	if (0 != r) {
		logme("fail at msgq create\r\n");
	}

// main controller task create
	r = task_create(NULL, main_controller, NULL, task_getmiddlepriority(), 256, "main_controller");
	if (0 != r) {
		logme("fail at task_create\r\n");
	}
	r = task_create(NULL, processing_recieved_ble_cmd, NULL, task_getmiddlepriority(), 256, "processing_recieved_ble_cmd");
	if (0 != r) {
		logme("fail at task_create\r\n");
	}
}

#define BLE_SORA_CMD_IDX		0
#define BLE_SORA_SUB_IDX		1
static void processing_recieved_ble_cmd(void * arg)
{
	int r;
	uint8_t msgRxBuffer[SORA_MSGQSIZE_MAX] = {0};

	uint8_t cmd, cmd_sub;

	for(;;)
	{
		r = msgq_receive(_bleGestureMsgq, msgRxBuffer);
		if(r != 0)
		{
			logme("fail at msgq_receive\r\n");
		}

		cmd = msgRxBuffer[BLE_SORA_CMD_IDX];
		cmd_sub = msgRxBuffer[BLE_SORA_SUB_IDX];

		switch(cmd)
		{
			case TEST_CMD_SVC_START :	// svc start trigger
				op_cmd_send(cmd_svc_start);
				break;

			case GESTURE_MODE_OP_CMD :
				if(cmd_sub == GESTURE_MODE_OP_CMD_SUB_REMOTE)
				{
					op_cmd_send(cmd_remote);
				}
				else if(cmd_sub == GESTURE_MODE_OP_CMD_SUB_FOLLOW)
				{
					op_cmd_send(cmd_following);
				}
				else if(cmd_sub == GESTURE_MODE_OP_CMD_SUB_LEAD)
				{
					op_cmd_send(cmd_leading);
				}
				break;

			case GESTURE_MODE_REMOTE :
				if(cmd_sub == GESTURE_MODE_REMOTE_SUB_LEFT)
				{

				}
				else if(cmd_sub == GESTURE_MODE_REMOTE_SUB_RIGTH)
				{

				}
				else if(cmd_sub == GESTURE_MODE_REMOTE_SUB_FRONT)
				{

				}
				else if(cmd_sub == GESTURE_MODE_REMOTE_SUB_BACK)
				{

				}
				break;

			case GESTURE_MODE_CANCEL :	// cancel
				op_cmd_send(cmd_cancel);
				break;

			default :
				break;
		}
	}
}

static void main_controller(void * arg)
{
	int r;

	main_op_t op_status = OP_IDLE;						// operation status
	main_op_t pre_op_status = OP_IDLE;					// operation status
	main_cmd_t op_cmd = MAIN_CMD_NONE;						// main op comman to select oeprations!

	uint8_t msgRxBuffer[SORA_MSGQSIZE_MAX] = {0};

	for(;;)
	{
		// buffer reset
		memset(msgRxBuffer, 0x00, sizeof(msgRxBuffer));

		// get main oepration command from usr interface
		r = msgq_receive(_main_op_msgq, msgRxBuffer);
		if(r != 0)
		{
			logme("fail at msgq_receive\r\n");
		}

		op_cmd = msgRxBuffer[0];	// op cmd

		// g value reset and delete pre operation's command
		op_tasks_switching();									// op switching manager trigger

		// get operation from command!
		pre_op_status = op_status;								// get pre operation
		op_status = get_main_operation(op_cmd, pre_op_status);	// get operation status to execute from command

		// main operation processing
		switch(op_status)
		{
			case OP_IDLE :
				printf("====================\n\rIdle statue!\n\r====================\n\r");
				IBU_ble_send_cmd(SORA_MODE_NONE); // send none mode to PAAR watch to alarm mode change
				send_lf_svc(LF_SVC_STOP);				// user is here? check svc stop
				break;

			case OP_USER_WAITING :
				printf("====================\n\ruser waiting\n\r====================\n\r");
				op_tasks_create(op_status);			// op usr waiting task create
				break;

			case OP_USER_SEARCHING :
				printf("====================\n\ruser searching\n\r====================\n\r");
				op_tasks_create(op_status);			// op usr following task create
				break;

			case OP_CMD_WAITING :
				printf("====================\n\rcommand waiting\n\r====================\n\r");
				send_lf_svc(LF_SVC_USR_RECOG_STOP); // usr recog stop
				send_lf_svc(LF_SVC_USR_SEARCH);		// user search start
				op_tasks_create(op_status);			// op usr following task create
				break;

			case OP_FOLLOWING :
				printf("====================\n\rfollowing\n\r====================\n\r");
				IBU_ble_send_cmd(SORA_MODE_MAIN_OP); // send main op mode to PAAR watch to alarm mode change
				op_tasks_create(op_status);			// op usr following task create
				break;

			case OP_LEADING :
				printf("====================\n\rleading\n\r====================\n\r");
				IBU_ble_send_cmd(SORA_MODE_MAIN_OP); // send main op mode to PAAR watch to alarm mode change

				break;

			case OP_REMOTE_CONTROL :
				printf("====================\n\rleading\n\r====================\n\r");
				IBU_ble_send_cmd(SORA_MODE_REMOTE); // send remote mode to PAAR watch to alarm mode change
				send_lf_svc(LF_SVC_USR_SEARCH_STOP);// user is here? check svc stop
				break;

			case OP_EMERGENCY_RC :
				printf("====================\n\rEmergency Mode!!\n\r====================\n\r");
				break;

			default :
				break;
		}

	}
}



static void op_tasks_waitingUsr(void * arg)
{
	send_lf_svc(LF_SVC_USR_SEARCH);			// user search start

	sem_take(_usr_isHere_sem);				// and wait for ble connection -> it means user is within 2m

	IBU_ble_send_cmd(SORA_MODE_USR_SEARCH); // send usr search mode to PAAR watch to alarm mode change

	send_lf_svc(LF_SVC_USR_SEARCH_STOP);	// user is here so, it dosen't need

	op_cmd_send(cmd_usr_here_ok);			// user is here, next op -> user search

	op_task_end(IDX_OP_TASK_WAITING_USR);	// delete itself
}

static void op_tasks_searchingUsr(void *arg)
{
	op_cmd_send(cmd_usr_search_ok);

	// searching sequence					// *** need to implement

	op_task_end(IDX_OP_TASK_SEARCHING_USR);	// delete itself
}

static void op_tasks_waitingForCmd(void *arg)
{
	task_sleep(500);						// prevent from confliction	in switching tasks
	IBU_ble_send_cmd(SORA_MODE_CMD_WAIT); 	// send cmd wait mode to PAAR watch to alarm mode change

	for(;;)
	{
		// led blinking	for indication of waiting!
		led_toggle(LED2);
		task_sleep(100);

		// waiting for command from user(PAAR watich)	//*** need to implement
	}

	// it dosen't delete itself, so in main control loop, switching function will delete it.
}

static void op_tasks_usrFollowing(void * arg)
{
	uint8_t dir_cnt = 0;

	int speed;
	int azimuth;

	int cur_dis;
	int diff_dis;

	int dirBuf[2] = {0,};
	int cur_dir;
	int diff_dir;

	int criteria_dis = CRITERIA_DISTANCE;
	int criteria_dir = 0;

	send_lf_svc(LF_SVC_USR_FOLLOW); 	// lf following svc start

	sem_take(_first_sampling_ok_sem);	// wait for first continous lf sampling to calculate initial speed of user

	// initial calculated speed
	//speed = _g_usr_speed;
	speed = azimuth = 0;
	motor_set_speed(LINEAR_MOTION, speed, azimuth, 0, 0);

	for(;;)
	{
		// last distance
//		last_dis = _g_usr_distance;

		// distance chk
		cur_dis = _g_usr_distance;
		diff_dis = cur_dis - criteria_dis;

		// speed calc
		if(diff_dis < -50)
			speed = -1;
		else if(diff_dis < -30)
			speed = 0;
		else if(diff_dis < 0)
			speed = 1;
		else if(diff_dis < 30)
			speed = 2;
		else if(diff_dis < 50)
			speed = 3;
		else
			speed = 4;

		if(dir_cnt != 2)
		{
			dirBuf[dir_cnt++] = _g_usr_direction;
		}
		else
		{
			dirBuf[dir_cnt] = _g_usr_direction;

			// azimuth chk
			cur_dir = get_average_dir(dirBuf,3);
			diff_dir = cur_dir - criteria_dir;

			// shift speed calc
			if(diff_dir > 15)
				azimuth = -1;
			else if(diff_dir < -15)
				azimuth= 1;
			else
				azimuth = 0;

			dir_cnt = 0;
		}

		motor_set_speed(LINEAR_MOTION, speed, azimuth, 0, 0);

		// sleep for next sampling
		task_sleep(200);

	}
}

static void op_tasks_lfSampling(void * arg)
{
	int i;
	int r;

	int lf_vect_buf[3] = {0};

	int samplingDis[NUMBER_OF_LF_SAMPLING] = {0,};
	int samplingDir[NUMBER_OF_LF_SAMPLING] = {0,};
	int avgSpeed;

	enum samplingTime{SAMPLING_INITIAL, SAMPLING_ROUTINE} first_try_flag = SAMPLING_INITIAL;

	uint8_t samplingNum = NUMBER_OF_LF_SAMPLING;

	for(;;)
	{
		for(i=0; i<samplingNum; i++)
		{
			r = msgq_receive(_lfsensingMsgq, (unsigned char *)lf_vect_buf);
//			printf("dis : %d, dir %d\n\r", lf_vect_buf[0], lf_vect_buf[1]);
			samplingDis[i] = lf_vect_buf[LF_SAMPLE_DISTANCE_IDX];
			samplingDir[i] = lf_vect_buf[LF_SAMPLE_DIRECTION_IDX];
		}

		_g_usr_distance = get_average_dis(samplingDis, samplingNum);
		_g_usr_direction = get_average_dir(samplingDir, samplingNum);

		if(first_try_flag == SAMPLING_INITIAL)
		{
			// initial speed calculation
			_g_usr_speed = get_average_speed(samplingDis, samplingNum);

			// first initail speed calculation ok sem give
			sem_give(_first_sampling_ok_sem);

			first_try_flag = SAMPLING_ROUTINE;
			samplingNum = 1;	// sampling number reset

			// arr reset
			memset(samplingDis, 0x00, sizeof(samplingDis));
			memset(samplingDir, 0x00, sizeof(samplingDir));
		}
		else
		{

		}
	}
}

int get_average_dis(int *aDis, uint8_t size)
{
	int i;
	int res = 0;
	int sum = 0;

	for(i=0; i<size; i++)
	{
		sum += aDis[i];
	}

	res = sum/size;

	return res;
}

int get_average_dir(int *aDir, uint8_t size)
{
	int i;
	int res = 0;
	int sum = 0;

	for(i=0; i<size; i++)
	{
		sum += aDir[i];
	}

	res = sum/size;

	return res;
}
int get_average_speed(int *aDis, uint8_t size)
{
	int i;
	int res;
	int diff[size-1];
	int diffSum = 0;

	for(i=0; i<size-1; i++)
	{
		diff[i] = aDis[i+1] - aDis[i];
	}

	for(i=0; i<size-1; i++)
	{
		diffSum += diff[i];
	}

	res = diffSum / (size-1);

	return res;
}
