/*
 * new_estk_glcd.c
 *
 *  Created on: 2015. 7. 3.
 *      Author: jaegeun
 */
#include <stdio.h>
#include <sam4e.h>
#include <stdarg.h>

#include "itf_ubinos/itf/bsp.h"
#include "itf_ubinos/itf/ubinos.h"

#include "../itf/new_estk_glcd.h"
#include "../itf/new_estk_ioport_set.h"

#include "sam_gpio/sam_gpio.h"
#include "spi/spi.h"
#include "../../../common/lib_ubiclib/src/_ubiclib_vprintfn.h"

const unsigned char Font5x7[] = {
	0x00, 0x00, 0x00, 0x00, 0x00,// (space)
	0x00, 0x00, 0x5F, 0x00, 0x00,// !
	0x00, 0x07, 0x00, 0x07, 0x00,// "
	0x14, 0x7F, 0x14, 0x7F, 0x14,// #
	0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
	0x23, 0x13, 0x08, 0x64, 0x62,// %
	0x36, 0x49, 0x55, 0x22, 0x50,// &
	0x00, 0x05, 0x03, 0x00, 0x00,// '
	0x00, 0x1C, 0x22, 0x41, 0x00,// (
	0x00, 0x41, 0x22, 0x1C, 0x00,// )
	0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
	0x08, 0x08, 0x3E, 0x08, 0x08,// +
	0x00, 0x50, 0x30, 0x00, 0x00,// ,
	0x08, 0x08, 0x08, 0x08, 0x08,// -
	0x00, 0x60, 0x60, 0x00, 0x00,// .
	0x20, 0x10, 0x08, 0x04, 0x02,// /
	0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
	0x00, 0x42, 0x7F, 0x40, 0x00,// 1
	0x42, 0x61, 0x51, 0x49, 0x46,// 2
	0x21, 0x41, 0x45, 0x4B, 0x31,// 3
	0x18, 0x14, 0x12, 0x7F, 0x10,// 4
	0x27, 0x45, 0x45, 0x45, 0x39,// 5
	0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
	0x01, 0x71, 0x09, 0x05, 0x03,// 7
	0x36, 0x49, 0x49, 0x49, 0x36,// 8
	0x06, 0x49, 0x49, 0x29, 0x1E,// 9
	0x00, 0x36, 0x36, 0x00, 0x00,// :
	0x00, 0x56, 0x36, 0x00, 0x00,// ;
	0x00, 0x08, 0x14, 0x22, 0x41,// <
	0x14, 0x14, 0x14, 0x14, 0x14,// =
	0x41, 0x22, 0x14, 0x08, 0x00,// >
	0x02, 0x01, 0x51, 0x09, 0x06,// ?
	0x32, 0x49, 0x79, 0x41, 0x3E,// @
	0x7E, 0x11, 0x11, 0x11, 0x7E,// A
	0x7F, 0x49, 0x49, 0x49, 0x36,// B
	0x3E, 0x41, 0x41, 0x41, 0x22,// C
	0x7F, 0x41, 0x41, 0x22, 0x1C,// D
	0x7F, 0x49, 0x49, 0x49, 0x41,// E
	0x7F, 0x09, 0x09, 0x01, 0x01,// F
	0x3E, 0x41, 0x41, 0x51, 0x32,// G
	0x7F, 0x08, 0x08, 0x08, 0x7F,// H
	0x00, 0x41, 0x7F, 0x41, 0x00,// I
	0x20, 0x40, 0x41, 0x3F, 0x01,// J
	0x7F, 0x08, 0x14, 0x22, 0x41,// K
	0x7F, 0x40, 0x40, 0x40, 0x40,// L
	0x7F, 0x02, 0x04, 0x02, 0x7F,// M
	0x7F, 0x04, 0x08, 0x10, 0x7F,// N
	0x3E, 0x41, 0x41, 0x41, 0x3E,// O
	0x7F, 0x09, 0x09, 0x09, 0x06,// P
	0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
	0x7F, 0x09, 0x19, 0x29, 0x46,// R
	0x46, 0x49, 0x49, 0x49, 0x31,// S
	0x01, 0x01, 0x7F, 0x01, 0x01,// T
	0x3F, 0x40, 0x40, 0x40, 0x3F,// U
	0x1F, 0x20, 0x40, 0x20, 0x1F,// V
	0x7F, 0x20, 0x18, 0x20, 0x7F,// W
	0x63, 0x14, 0x08, 0x14, 0x63,// X
	0x03, 0x04, 0x78, 0x04, 0x03,// Y
	0x61, 0x51, 0x49, 0x45, 0x43,// Z
	0x00, 0x00, 0x7F, 0x41, 0x41,// [
	0x02, 0x04, 0x08, 0x10, 0x20,// "\"
	0x41, 0x41, 0x7F, 0x00, 0x00,// ]
	0x04, 0x02, 0x01, 0x02, 0x04,// ^
	0x40, 0x40, 0x40, 0x40, 0x40,// _
	0x00, 0x01, 0x02, 0x04, 0x00,// `
	0x20, 0x54, 0x54, 0x54, 0x78,// a
	0x7F, 0x48, 0x44, 0x44, 0x38,// b
	0x38, 0x44, 0x44, 0x44, 0x20,// c
	0x38, 0x44, 0x44, 0x48, 0x7F,// d
	0x38, 0x54, 0x54, 0x54, 0x18,// e
	0x08, 0x7E, 0x09, 0x01, 0x02,// f
	0x08, 0x14, 0x54, 0x54, 0x3C,// g
	0x7F, 0x08, 0x04, 0x04, 0x78,// h
	0x00, 0x44, 0x7D, 0x40, 0x00,// i
	0x20, 0x40, 0x44, 0x3D, 0x00,// j
	0x00, 0x7F, 0x10, 0x28, 0x44,// k
	0x00, 0x41, 0x7F, 0x40, 0x00,// l
	0x7C, 0x04, 0x18, 0x04, 0x78,// m
	0x7C, 0x08, 0x04, 0x04, 0x78,// n
	0x38, 0x44, 0x44, 0x44, 0x38,// o
	0x7C, 0x14, 0x14, 0x14, 0x08,// p
	0x08, 0x14, 0x14, 0x18, 0x7C,// q
	0x7C, 0x08, 0x04, 0x04, 0x08,// r
	0x48, 0x54, 0x54, 0x54, 0x20,// s
	0x04, 0x3F, 0x44, 0x40, 0x20,// t
	0x3C, 0x40, 0x40, 0x20, 0x7C,// u
	0x1C, 0x20, 0x40, 0x20, 0x1C,// v
	0x3C, 0x40, 0x30, 0x40, 0x3C,// w
	0x44, 0x28, 0x10, 0x28, 0x44,// x
	0x0C, 0x50, 0x50, 0x50, 0x3C,// y
	0x44, 0x64, 0x54, 0x4C, 0x44,// z
	0x00, 0x08, 0x36, 0x41, 0x00,// {
	0x00, 0x00, 0x7F, 0x00, 0x00,// |
	0x00, 0x41, 0x36, 0x08, 0x00,// }
	0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
	0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};

unsigned int aaa, bbbb;
//unsigned int i,j;

void glcdGotoChar(unsigned int col, unsigned int line)
{
	glcdSetAddress(col*6, line);
}

void glcdWriteChar(char c)
{
	if(c == '\n')
	{
		bbbb++;
		if(bbbb<8)
			glcdSetAddress(1,bbbb);	//SH?
		else{
			glcdSetAddress(1,0);
			bbbb=0;
		}
		return;
	}
	unsigned int i = 0;

	for (i=0; i<5; i++)
		glcd_data(Font5x7[((c - 0x20) * 5) + i]);
	// write a spacer line
	glcd_data(0x00);
	aaa += 6;
}

/// Original
void glcdPutStr(char *data)
{
	while(*data)
	{
		glcdWriteChar(*data);
		data++;
	}
}

void glcd_printf(char * format_p, ... )
{
	va_list ap;
	char buf[256];

	va_start(ap, format_p);
	vfprintfn(SYS_OUT__MEM, buf, 256, format_p, ap);
	// glcdWriteChar(buf);
	glcdPutStr(buf);
	va_end(ap);
}

void glcdSetXAddress(unsigned int xAddr)
{
	glcd_set_col(xAddr);
	aaa = xAddr;
}

void glcdSetYAddress(unsigned int yAddr)
{
	glcd_set_page(yAddr);
	bbbb = yAddr;
}

void glcdSetAddress(unsigned X, unsigned yLine)
{
	// Set addresses
	glcdSetYAddress(yLine);
	glcdSetXAddress(X);
}

void Draw_BMP(unsigned int cx, unsigned int cy, unsigned int szx, unsigned int szy, const unsigned char *buf)
{
	unsigned int bi;
	unsigned char x,y;
	x = cx, y = cy;
	glcdSetAddress(x,y);
	glcd_data(buf[0]);

	for(bi=1; bi<szx-1; bi++)
	{
		if((bi % 128) == 0)
		{
			x=0;
			y++;
			glcdSetAddress(x,y);
		}
		else if ((bi % 64) == 0)
		{
			x=0;
			glcdSetAddress(x,y);
		}
		glcd_data(buf[bi]);
	}
}

void glcd_init(void)
{
	unsigned char ContrastLevel;	// for contrast setting level

	gpio_configure_pin(LCD_CS, LCD_CS_FLAGS);
	gpio_configure_pin(LCD_RE, LCD_RE_FLAGS);

	ioport_set_pin_peripheral_mode(SPI_MISO_GPIO, SPI_MISO_FLAGS);
	ioport_set_pin_peripheral_mode(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
	ioport_set_pin_peripheral_mode(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);

	spi_enable_clock(SPI_MASTER_BASE);
	spi_disable(SPI_MASTER_BASE);
	spi_reset(SPI_MASTER_BASE);
	spi_set_master_mode(SPI_MASTER_BASE);
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
	spi_disable_loopback(SPI_MASTER_BASE);
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, LCD_SPI_CHIP_SEL);
	spi_set_fixed_peripheral_select(SPI_MASTER_BASE);

	spi_set_transfer_delay(SPI_MASTER_BASE, LCD_SPI_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, LCD_SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(SPI_MASTER_BASE, LCD_SPI_CHIP_SEL, 12);
	spi_set_clock_polarity(SPI_MASTER_BASE, LCD_SPI_CHIP_SEL, LCD_SPI_CLK_POLARITY);
	spi_set_clock_phase(SPI_MASTER_BASE, LCD_SPI_CHIP_SEL, LCD_SPI_CLK_PHASE);

	spi_enable(SPI_MASTER_BASE);

	glcd_delay(500);

	ContrastLevel=0x15;		// default Contrast Leve 1a
	glcd_cmd(0xab);			// new
	glcd_cmd(0xaf);         // display on
	glcd_cmd(0x40);         // display start line=0
	glcd_cmd(0xc8);         // Common output mode select= reverse
	glcd_cmd(0xa6);         // normal display
	glcd_cmd(0xa4);         // Duisplay all point = off
	glcd_cmd(0xa3);         // LCD bias = 1/9   a2
	glcd_cmd(0x2f);         // Power control = all on
	glcd_cmd(0x25);         // Rab Ratio     26
	glcd_cmd(0x81);         // E-Vol setting
	glcd_cmd(0x08); 		// (2byte command)

	glcd_clear();
}

void glcd_set_col(unsigned char col)
{

	/**
	 * Set LCD RAM Colum Address
	 */
	glcd_cmd((col >> 4) | 0x10);
	glcd_cmd(col & 0x0f);

}

void glcd_set_page(unsigned char page)
{

	glcd_cmd(page | 0xb0);
}

void glcd_delay(unsigned int cnt)
{
	unsigned int i,j;

	for(j=0; j<cnt; j++)
		for(i=0; i<1; i++);
}

void glcd_data(unsigned int ch)
{
	gpio_set_pin_high(LCD_RE);
	gpio_set_pin_low(LCD_CS);

	spi_write(SPI_MASTER_BASE,ch, LCD_SPI_CHIP_SEL, 0);

	gpio_set_pin_high(LCD_CS);
}

void glcd_cmd(unsigned int cmd)
{
	gpio_set_pin_low(LCD_RE);
	gpio_set_pin_low(LCD_CS);

    spi_write(SPI_MASTER_BASE,cmd, LCD_SPI_CHIP_SEL, 0);

	gpio_set_pin_high(LCD_CS);
}

void glcd_clear(void)
{
	int i,j;
	for(i=0; i<8; i++)
	{
		glcd_cmd(i | 0xb0);
		glcd_cmd(0x10);
		glcd_cmd(0x00);

		for(j=0; j<132; j++)
			glcd_data(0);
	}
	glcdGotoChar(0,0);
}


