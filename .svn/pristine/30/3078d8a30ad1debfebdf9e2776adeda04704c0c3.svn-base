/*
 * lib_sensor.c
 *
 *  Created on: 2015. 7. 8.
 *      Author: minsu
 */

#include <stdio.h>
#include <sam4e.h>

#include "itf_ubinos/itf/bsp.h"
#include "itf_ubinos/itf/ubinos.h"

#include "../itf/lib_sensor.h"
#include "../../lib_i2c/itf/lib_i2c.h"
#include "../../../porting/bsp_armcortexm_sam4eek/itf/sam4e16e.h"

static void sensor_irq_handler(void);

static unsigned short exps_sensor_type[ESTK_SENSOR_PORT_SIZE] = {0};
static int nxt_sensor_irq_counter = 0;
static int nxt_digital_irq_counter[4] = {0};

int distance_state[4] = {0};
int digital_sen_data[4] = {-1, -1, -1, -1};

void lib_sensor_component_init( void )
{
	printf("library sensor test\n\r");
}

void sensor_init(unsigned short port0_sensor_type, unsigned short port1_sensor_type,
		unsigned short port2_sensor_type, unsigned short port3_sensor_type)
{
	unsigned int dummy;

	exps_sensor_type[0] = port0_sensor_type;
	exps_sensor_type[1] = port1_sensor_type;
	exps_sensor_type[2] = port2_sensor_type;
	exps_sensor_type[3] = port3_sensor_type;

	/// Enable the Peripheral ADC
//	pmc_enable_periph_clk(ID_AFEC1);
	PMC->PMC_PCER0 = 1<<ID_AFEC1;
	/// Disable All ADC Channels( 16 channels )
	AFEC1->AFEC_CHDR = 0xFFFF;

	/// Initialize Control Signals
	PIOC->PIO_PER = SEN_MASK|NXT_MASK;	// Set in PIO mode
	PIOC->PIO_OER = SEN_MASK|NXT_MASK;	// Configure in Output
	PIOC->PIO_SODR = SEN_MASK|NXT_MASK;	// Start status = High( 8.1 V )

//	PIOC->PIO_PER |= NXT_MASK;	///HJ Set in PIO mode for port C
//	PIOC->PIO_OER |= NXT_MASK;	///HJ Configure in Output
//	PIOC->PIO_SODR |= NXT_MASK;
	/// Set up ADC Mode Register

	AFEC1->AFEC_MR	=	AFEC_MR_TRGEN_DIS		|
						AFEC_MR_SLEEP_NORMAL	|
						AFEC_MR_PRESCAL(9)		|
						AFEC_MR_TRACKTIM(15)	|
						(AFEC_MR_STARTUP_SUT0 & AFEC_MR_STARTUP_Msk)
						;
	AFEC1->AFEC_EMR	=	AFEC_EMR_RES_LOW_RES;

	AFEC1->AFEC_CHER	=	AFEC_CHER_CH4	|
							AFEC_CHER_CH5	|
							AFEC_CHER_CH6	|
							AFEC_CHER_CH7
							;
	AFEC1->AFEC_COCR	=	2047;

	/// Enable the Peripheral TC5
//	pmc_enable_periph_clk(ID_TC5);
	PMC->PMC_PCER0 = 1<<ID_TC5;

	TC1->TC_CHANNEL[2].TC_CCR = TC_CCR_CLKDIS;	// Counter Clock Disable Command
	TC1->TC_CHANNEL[2].TC_IDR = 0xFFFFFFFF;		// Timer Interrupt Disable Command
	dummy = TC1->TC_CHANNEL[2].TC_SR;
	TC1->TC_CHANNEL[2].TC_CMR = (TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG );	// Channel Mode ( TCLK1 Select(0) and RC Compare Trigger Enable )
	TC1->TC_CHANNEL[2].TC_CCR = TC_CCR_CLKEN;	// Counter Clock Enable Command
	TC1->TC_CHANNEL[2].TC_IER = TC_IER_CPCS;	// RC Compare Interrupt Enable
	intr_connectisr(ID_TC5, sensor_irq_handler, 0x40, 0);
	intr_enable(ID_TC5);
	TC1->TC_CHANNEL[2].TC_RC = 0x4B80;
	TC1->TC_CHANNEL[2].TC_CCR = TC_CCR_SWTRG;

//	tc_init(TC1,2,TC_CMR_TCCLKS_TIMER_CLOCK1|TC_CMR_CPCTRG);
//	intr_connectisr(ID_TC5, sensor_irq_handler, 0x40, 0);
//	tc_enable_interrupt(TC1, 2, TC_IER_CPCS);
//	intr_enable(ID_TC5);
//	TC1->TC_CHANNEL[2].TC_RC = 0x4B80;
//	tc_start(TC1,2);

	i2c_init();
	unsigned char i;
	for(i=0;i<4;i++)
	{
		if((exps_sensor_type[i]&ESTK_SENSOR_TYPE_MASK) == NXT_DIGITAL_SENSOR)
		{
			i2c_enable(i);
		}
		else
		{
			i2c_disable(i);
		}
	}
}

int sensor_get(char port)
{
	int value;

	switch (port)
	{
	case 0:
		switch(exps_sensor_type[0]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				// Assign ADC value from channel 4 (SEN_A)
				AFEC1->AFEC_CSELR=4;
				value = AFEC1->AFEC_CDR;
				break;
			case NXT_DIGITAL_SENSOR :
				value = digital_sen_data[0];
				break;
			default :
				printf("error : <sensor get> undefined sensor type\r\n");
				return 0;
		}
		break;
	case 1:
		switch(exps_sensor_type[1]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				// Assign ADC value from channel 5 (SEN_B)
				AFEC1->AFEC_CSELR=5;
				value = AFEC1->AFEC_CDR;
				break;
			case NXT_DIGITAL_SENSOR :
				value = digital_sen_data[1];
				break;
			default :
				printf("error : <sensor get> undefined sensor type\r\n");
				return 0;
		}
		break;
	case 2:
		switch(exps_sensor_type[2]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				// Assign ADC value from channel 6 (SEN_C)
				AFEC1->AFEC_CSELR=6;
				value = AFEC1->AFEC_CDR;
				break;
			case NXT_DIGITAL_SENSOR :
				value = digital_sen_data[2];
				break;
			default :
				printf("error : <sensor get> undefined sensor type\r\n");
				return 0;
		}
		break;
	case 3:
		switch(exps_sensor_type[3]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				// Assign ADC value from channel 7 (SEN_D)
				AFEC1->AFEC_CSELR=7;
				value = AFEC1->AFEC_CDR;
				break;
			case NXT_DIGITAL_SENSOR :
				value = digital_sen_data[3];
				break;
			default :
				printf("error : <sensor get> undefined sensor type\r\n");
				return 0;
		}
		break;
	default: break;
	}
	return (value & 0x3FF);
}

void sensor_irq_handler(void)
{
	unsigned int status;

	nxt_sensor_irq_counter++;

	switch(nxt_sensor_irq_counter)
	{
	case 1:
		switch(exps_sensor_type[0]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn On RED Light
				PIOC->PIO_SODR = NXT_CON_00;
				// Assign ADC value from channel 4 (SEN_A)
				PIOC->PIO_CODR = SEN_CON_00;
				break;
			case NXT_DIGITAL_SENSOR :
				nxt_digital_irq_counter[0]++;
				if(nxt_digital_irq_counter[0]==1)
					set_digital_sensor(0);
				else if(nxt_digital_irq_counter[0]>=10)
					nxt_digital_irq_counter[0] = 0;
				break;
			default :
				break;
		}
		AFEC1->AFEC_CHDR = ~0x10;
		AFEC1->AFEC_CHER = AFEC_CHER_CH4;
		break;

	case 2:
		AFEC1->AFEC_CR = AFEC_CR_START;
		break;

	case 3:
		switch(exps_sensor_type[0]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :

				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn Off RED Light
				if(exps_sensor_type[0] ==NXT_SENSOR_LIGHT)
					PIOC->PIO_CODR = NXT_CON_00;
				// Assign ADC value from channel 4 (SEN_A)
				PIOC->PIO_CODR = SEN_CON_00;
				break;
			case NXT_DIGITAL_SENSOR :
				break;
			default :
				break;
		}
		switch(exps_sensor_type[1]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn On RED Light
				if(exps_sensor_type[0] ==NXT_SENSOR_LIGHT)
					PIOC->PIO_SODR = NXT_CON_01;
				// Assign ADC value from channel 5 (SEN_B)
				PIOC->PIO_CODR = SEN_CON_01;
				break;
			case NXT_DIGITAL_SENSOR :
				nxt_digital_irq_counter[1]++;
				if(nxt_digital_irq_counter[1]==1)
					set_digital_sensor(1);
				else if(nxt_digital_irq_counter[1]>=10)
					nxt_digital_irq_counter[1] = 0;
				break;
			default :
				break;
		}
		AFEC1->AFEC_CHDR = ~0x20;
		AFEC1->AFEC_CHER = AFEC_CHER_CH5;
		break;

	case 4:
		AFEC1->AFEC_CR = AFEC_CR_START;
		break;

	case 5:
		switch(exps_sensor_type[1]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn Off RED Light
				if(exps_sensor_type[0] ==NXT_SENSOR_LIGHT)
					PIOC->PIO_CODR = NXT_CON_01;
				// Assign ADC value from channel 5 (SEN_B)
				PIOC->PIO_CODR = SEN_CON_01;
				break;
			case NXT_DIGITAL_SENSOR :
				break;
			default :
				break;
		}
		switch(exps_sensor_type[2]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn On RED Light
				if(exps_sensor_type[0] ==NXT_SENSOR_LIGHT)
					PIOC->PIO_SODR = NXT_CON_02;
				// Assign ADC value from channel 6 (SEN_C)
				PIOC->PIO_CODR = SEN_CON_02;
				break;
			case NXT_DIGITAL_SENSOR :
				nxt_digital_irq_counter[2]++;
				if(nxt_digital_irq_counter[2]==1)
					set_digital_sensor(2);
				else if(nxt_digital_irq_counter[2]>=10)
					nxt_digital_irq_counter[2] = 0;
				break;
			default :
				break;
		}
		AFEC1->AFEC_CHDR = ~0x40;
		AFEC1->AFEC_CHER = AFEC_CHER_CH6;
		break;

	case 6:
		AFEC1->AFEC_CR = AFEC_CR_START;
		break;

	case 7:
		switch(exps_sensor_type[2]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn Off RED Light
				if(exps_sensor_type[0] ==NXT_SENSOR_LIGHT)
					PIOC->PIO_CODR = NXT_CON_02;
				// Assign ADC value from channel 6 (SEN_C)
				PIOC->PIO_CODR = SEN_CON_02;
				break;
			case NXT_DIGITAL_SENSOR :
				break;
			default :
				break;
		}
		switch(exps_sensor_type[3]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn On RED Light
				if(exps_sensor_type[0] ==NXT_SENSOR_LIGHT)
					PIOC->PIO_SODR = NXT_CON_03;
				// Assign ADC value from channel 7 (SEN_D)
				PIOC->PIO_CODR = SEN_CON_03;
				break;
			case NXT_DIGITAL_SENSOR :
				nxt_digital_irq_counter[3]++;
				if(nxt_digital_irq_counter[3]==1)
					set_digital_sensor(3);
				else if(nxt_digital_irq_counter[3]>=10)
					nxt_digital_irq_counter[3] = 0;
				break;
			default :
				break;
		}
		AFEC1->AFEC_CHDR = ~0x80;
		AFEC1->AFEC_CHER = AFEC_CHER_CH7;
		break;

	case 8:
		AFEC1->AFEC_CR = AFEC_CR_START;
		break;

	case 9:
		switch(exps_sensor_type[3]&ESTK_SENSOR_TYPE_MASK)
		{
			case NXT_SENSOR :
				///HJ Added for Light sensor so-called NXT Light sensor
				// Turn Off RED Light
				if(exps_sensor_type[0] ==NXT_SENSOR_LIGHT)
					PIOC->PIO_CODR = NXT_CON_03;
				// Assign ADC value from channel 7 (SEN_D)
				PIOC->PIO_CODR = SEN_CON_03;
				break;
			case NXT_DIGITAL_SENSOR :
				break;
			default :
				break;
		}
		AFEC1->AFEC_CHDR = 0xFFFF;
		break;

	case 10:
		nxt_sensor_irq_counter=0;
		break;
	}
	status = TC1->TC_CHANNEL[2].TC_SR;
}

void set_digital_sensor(unsigned char port)
{
	if(i2c_busy(port) == 0)
	{
		digital_sen_data[port] = (int)distance_state[port];
		/* i2c_start_transaction just triggers an I2C transaction, actual data transaction
		 * between ARM7 and a Ultrasonic sensor is done by an ISR after this, so there is one
		 * cycle delay for consistent data acquistion
		 */
		i2c_start_transaction(port, 1, 0x42, 1, &distance_state[port], 1, 0);
	}
}
