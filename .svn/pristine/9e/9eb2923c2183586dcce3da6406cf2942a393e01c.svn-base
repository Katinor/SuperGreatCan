/*
 * lib_IBU.c
 *
 *  Created on: 2015. 7. 8.
 *      Author: jaegeun
 */

#include <stdio.h>
#include <sam4e.h>
#include <string.h>

#include "itf_ubinos/itf/bsp.h"
#include "itf_ubinos/itf/ubinos.h"
#include "itf_ubinos/itf/bsp_intr.h"
#include "itf_ubinos/itf/ubik_msgq.h"
#include "itf_ubinos/itf/ubik_sem.h"


#include "uart/uart.h"
#include "sam4e16e.h"

#include "../itf/lib_IBU.h"
#include "../../exe_sora_test1/hdr/sora_config.h"
#include "../../lib_ata5279c/itf/lib_ata5279c.h"
#include "../../lib_sora_support/itf/lib_sora_lf_service_manager.h"

/* -------------------------------------------------------------------------
	Prototypes
 ------------------------------------------------------------------------- */
void IBU_uart_init( void );
void IBU_uart_ISR( void );	// uart1 RX interrupt handler
static void IBU_bleManager(void * arg); // IBU BLE manager task
void IBU_packetReWrapping(uint8_t *dst, uint8_t *src, uint8_t size); // packet re wrapping for msgq send

/* -------------------------------------------------------------------------
	Global variables
 ------------------------------------------------------------------------- */
const uint8_t str_IBU_scan[] = { 0xAA, 0x02, 0x01, 0xF3 };			// scan command protocol ESTK -> IBU
const uint8_t str_IBU_disconnect[] = { 0xAA, 0x02, 0x03, 0xF3 };	// disconnect command protocol ESTK -> IBU
const uint8_t str_IBU_emergency[] = { 0xAA, 0x04, 0xE7, 0xFF, 0xFF, 0xF3 };
msgq_pt _receviedDataMsgq = NULL;	// uart isr -> ibu manager

/* -------------------------------------------------------------------------
	Function Definitions
 ------------------------------------------------------------------------- */

void IBU_uart_init( void )
{
// UART init for M4 - IBU interface !
// baudrate is 38400 !
	unsigned int abcdsr;

	/* Reset and disable receiver & transmitter */
	UART1->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;

	/* Disable interrupts */
	PIOA->PIO_IDR = 0x00000600;

	/* Configure PIOs for DBGU */
	PIOA->PIO_PUDR = 0x00000060;
	abcdsr = PIOA->PIO_ABCDSR[0];
	PIOA->PIO_ABCDSR[0] &= (~0x00000060 & abcdsr);
	abcdsr = PIOA->PIO_ABCDSR[1];
	PIOA->PIO_ABCDSR[1] |= 0x00000060;
	PIOA->PIO_PDR = 0x00000060;

	/* Configure PMC */
	PMC->PMC_PCER1 = (1 << (ID_UART1-32));

	/* === Configure serial link === */
	/* Define the baud rate divisor register [BRGR = MCK / (38400 * 16)] */
	UART1->UART_BRGR = 78;
	/* Configure mode */
	UART1->UART_MR = UART_MR_PAR_NO;

	/* Disable the RX and TX PDC transfer requests */
	UART1->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;

	/* Enable transmitter */
	UART1->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
// END of UART initialize

// setting of interrupt - uart rx complete ->>
// when receiving data is complete through the uart, rxrdy bit is set!
	intr_disable(ID_UART1);
	intr_connectisr(ID_UART1, IBU_uart_ISR, 0x40, 0);
	intr_enable(ID_UART1);

	uart_enable_interrupt(UART1, UART_IER_RXRDY);
// end of isr setting
}

void IBU_component_init( void )
{
	int r;

// uart init
	IBU_uart_init();

// msgq create
	r = msgq_create(&_receviedDataMsgq, IBU_MSGQSIZE_MAX, IBU_MSGCNT_MAX);
	if (0 != r) {
		logme("fail at msgq create\r\n");
	}

// menu manager task create
	r = task_create(NULL, IBU_bleManager, NULL, task_getmiddlepriority(), 256, "IBU_bleManager");
	if (0 != r) {
		logme("fail at task_create\r\n");
	}

}

int IBU_uart_putc(int ch) {
	for (;;)
	{
		if(UART1->UART_SR & UART_SR_TXEMPTY) {
			break;
		}
	}

	UART1->UART_THR = (ch & 0xFF);

	return 0;
}

int IBU_uart_puts(char * str, int size) {
	int i = 0;

	for (i=0; i<size; i++) {
		IBU_uart_putc(*str);
		str++;
	}

	return i;
}

void IBU_scanStart( void )
{
	IBU_uart_puts((char*)str_IBU_scan, sizeof(str_IBU_scan));
}
void IBU_disConnect( void )
{
	IBU_uart_puts((char*)str_IBU_disconnect, sizeof(str_IBU_disconnect));
}
void IBU_sendEmergencyMsg( void )
{
	IBU_uart_puts((char*)str_IBU_emergency, sizeof(str_IBU_emergency));
}
void IBU_ble_send_cmd(uint8_t cmd)
{
	uint8_t data_dummy[] = {0xFF, 0xFF};

	IBU_send_bleMsg(cmd, data_dummy);
}
void IBU_send_bleMsg(uint8_t cmd, uint8_t *data)
{
	uint8_t aPacket[6] = {0,};

	aPacket[IBU_BLE_PACKET_START_IDX] = IBU_BLE_PACKET_START;
	aPacket[IBU_BLE_PACKET_LEN_IDX] = IBU_BLE_PACKET_PAYLOAD_LEN;
	aPacket[IBU_BLE_PACKET_END_IDX] = IBU_BLE_PACKET_END;


	aPacket[IBU_BLE_PACKET_CMD_IDX] = cmd;

	memcpy(aPacket+IBU_BLE_PACKET_DATA1_IDX, data, 2);

	IBU_uart_puts((char*)aPacket, IBU_BLE_PACKET_WIDTH);
}

void IBU_BLE_disconnection( void )
{
	IBU_disConnect();
	_g_isIbuBleConnected = IBU_BLE_DISCONNECTED;		// ble disconnect status
	sendMsgqToLfController(CMD_LF_BLE_DISCONN, LF_DELAY_NONE_SET);// disconnect signal to PAAR watch
}

// uart1 interrupt handler
void IBU_uart_ISR() {

	uint32_t dw_status = uart_get_status(UART1);			// interrupt status mask
	uint8_t received_byte;									// 1byte recieve msg

	static uint8_t msgIbuBuffer[IBU_PACKET_LENGTH] = {0};	// msg buffer
	static uint8_t ibu_uart_irq_state = IBU_STATE_IDLE;		// state
	static uint8_t ibu_data_index = IBU_RX_DATA_START;		// data index
	static uint8_t msgLength = 0;							// msg len

	// rxrdy interrupt src -> when 1 byte is received, it occurred
	if(dw_status & UART_SR_RXRDY) {
		uart_read(UART1, &received_byte);

		// uart msg receive state machine
		if(received_byte == IBU_UART_STX){
			// buffer reset
			memset(msgIbuBuffer, 0x00, sizeof(msgIbuBuffer));
			ibu_uart_irq_state = IBU_STATE_STX;
		}
		else if (received_byte == IBU_UART_ETX)
			ibu_uart_irq_state = IBU_STATE_ETX;

		// index switching
		switch (ibu_uart_irq_state) {
			case IBU_STATE_STX:
				ibu_uart_irq_state++;
				break;
			case IBU_STATE_LEN:
				ibu_uart_irq_state++;
				msgLength = received_byte;
				msgIbuBuffer[ibu_data_index++] = received_byte;
				break;
			case IBU_STATE_DATA:
				msgIbuBuffer[ibu_data_index++] = received_byte;
				break;
			case IBU_STATE_ETX:

				// trigger manager task process
				msgq_send(_receviedDataMsgq, msgIbuBuffer);

				// reset state.
				ibu_uart_irq_state = IBU_STATE_IDLE;
				ibu_data_index = IBU_RX_DATA_START;
				break;
			default:
				break;
		}
	}

}

// ble manager task
static void IBU_bleManager(void * arg) // IBU BLE manager task
{
	int r;
	uint8_t rxBuffer[IBU_PACKET_LENGTH] = {0};
	uint8_t txToLfSVCBuf[IBU_PACKET_LENGTH] = {0};
	uint8_t rxBufLen;	// buffer length
	uint8_t rxCmd;		// buffer command
	uint8_t ble_gesture_buf[3] = {0,};

	for(;;)
	{
		memset(rxBuffer, 0x00, sizeof(rxBuffer));	// buffer reset

		r = msgq_receive(_receviedDataMsgq, rxBuffer);
		if(r != 0) // fail to receive
		{
			continue;
		}

		memset(txToLfSVCBuf, 0x00, sizeof(txToLfSVCBuf));	// buffer reset

		rxBufLen = rxBuffer[RX_DAT_LEN_IDX];
		rxCmd = rxBuffer[RX_DAT_CMD_IDX];

		switch(rxCmd)
		{
			case LF_CMD_BLE_CONN :
				ble_connection_ok_sem();// semaphore give to lf svc
				break;

			case LF_CMD_REGION_CHK :
				break;

			case LF_CMD_RSSI_FOLLOW :
				IBU_packetReWrapping(txToLfSVCBuf, rxBuffer, rxBufLen);
				send_lf_dis_msgq(txToLfSVCBuf);
				break;

			case LF_CMD_RSSI_LEAD :
				// give msgq to svc
				break;

			case LF_USR_CHK_ACK :
				// give sem to usr chk task in LF SVC
				usr_check_ok_sem();// semaphore give to lf svc
				break;

			case GESTURE_MODE_OP_CMD :
			case GESTURE_MODE_REMOTE :
			case GESTURE_MODE_CANCEL :
			case TEST_CMD_SVC_START :
				ble_gesture_buf[0] = rxBuffer[RX_DAT_CMD_IDX];
				ble_gesture_buf[1] = rxBuffer[RX_DAT_CMD_IDX+1];
				ble_gestureCmd_send(ble_gesture_buf);
				break;

			default :
				break;
		}
	}
}

// convert char string distance to integer
void IBU_packetReWrapping(uint8_t *dst, uint8_t *src, uint8_t size)
{
	uint8_t i=0;
	uint8_t distance;
	uint8_t cDisTmpBuf[3] = {0};
	uint8_t antOffSet = 0;

	uint8_t idx2ndAntAtt, idx2ndAntDisLen, idx2ndAntDis;

	dst[i++] = src[RX_DAT_CMD_IDX];	// dst[0] = cmd
	dst[i++] = src[RX_DAT_1ST_ANT_ATT_IDX]; // dst[1] = first antenna attribute

	// first antenna distance conversion to integer
	memcpy(cDisTmpBuf, src+RX_DAT_1ST_ANT_DIS_IDX, src[RX_DAT_1ST_ANT_DIS_LEN_IDX]);
	distance = (uint8_t) atoi(cDisTmpBuf);
	dst[i++] = distance;

	// 2nd antenna index set up
	antOffSet = src[RX_DAT_1ST_ANT_DIS_LEN_IDX]+1;
	idx2ndAntAtt = RX_DAT_1ST_ANT_ATT_IDX + antOffSet +1;
	idx2ndAntDisLen = RX_DAT_1ST_ANT_DIS_LEN_IDX + antOffSet +1;
	idx2ndAntDis = RX_DAT_1ST_ANT_DIS_IDX + antOffSet +1;

	dst[i++] = src[idx2ndAntAtt]; // second antenna attribute

	// first antenna distance conversion to integer
	memset(cDisTmpBuf, 0x00, sizeof(cDisTmpBuf));
	memcpy(cDisTmpBuf, src+idx2ndAntDis, src[idx2ndAntDisLen]);
	distance = (uint8_t) atoi(cDisTmpBuf);
	dst[i++] = distance;

	// if region chk cmd
	if(src[RX_DAT_CMD_IDX] == LF_CMD_REGION_CHK)
	{
		dst[i] = src[size];
	}
}

