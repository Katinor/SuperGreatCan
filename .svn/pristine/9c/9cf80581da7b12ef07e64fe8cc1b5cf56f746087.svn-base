/*
 * lf_distance.c
 *
 *  Created on: 2015. 7. 21.
 *      Author: jaegeun
 */

#include <stdio.h>
#include <sam4e.h>
#include <string.h>

// ubinos library include
#include "itf_ubinos/itf/bsp.h"
#include "itf_ubinos/itf/ubinos.h"

// its interface include
#include "../itf/lf_distance.h"

// custom library inclue
#include "../../lib_math/itf/lib_math.h"
#include "../../lib_ata5279c/itf/lib_ata5279c.h"

/* -------------------------------------------------------------------------
	Constant Definition
 ------------------------------------------------------------------------- */
#define		DIS_WIDTH		20
#define		PI				3.141592f
#define		HEIGHT_DELTA	80.0f	//150605 for 1m waist user recognition

/* -------------------------------------------------------------------------
	Prototypes
 ------------------------------------------------------------------------- */
int checkTriGeneral(int a, int b, int c);
float getDirection(float x, float y);
int  nxpROUND(float num);
VECT calcTriangle(int dA, int dB, int dW);
/* -------------------------------------------------------------------------
	Global variables
 ------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------
	Function Definitions
 ------------------------------------------------------------------------- */

// Condition of resolution as triangle
// 제일 긴변이 아닌거 두개의 합보다 작아야한다.
int checkTriGeneral(int a, int b, int c)
{
	if ((a >= b) && (a >= c))
	{
		if ((b + c) > a)
			return 0;
		else
			return (a - (b+c) +1);
	}
	else if ((b >= a) && (b >= c))
	{
		if ((a + c) > b)
			return 0;
		else
			return (b - (a + c) + 1);
	}
	else if ((c >= a) && (c >= b))
	{
		if ((a + b) > c)
			return 0;
		else
			return(c - (a + b) + 1);
	}
	return 0;
}

VECT calcTriangle(int dA, int dB, int dW)
{
	VECT res = { 0, };

	float alpha;
	float tempRes;

	// 1) get alpha
	tempRes = (float) (dA*dA + dW*dW - dB*dB);
	tempRes /= (float)(2 * dA*dW);
	alpha = s_acos(tempRes);			// radian

	// 2) get x,y
	res.x = ((float)dA * s_cos(alpha)) - (float)dW / 2.0f; // radian
	res.y = ((float)dA) * s_sin(alpha);	// radian

	// 3) distance
	res.distance = nxpROUND(s_sqrt(res.x*res.x + res.y*res.y));
	// 4) direction
	res.direction = nxpROUND(getDirection(res.x, res.y));

	return res;
}

float getDirection(float x, float y)
{
	float dir = 0.0f;
	float beta = 0.0f;
	float fTmpDis = 0.0f;

	if (x != 0)
	{
		fTmpDis = s_sqrt( x*x + y*y );
		beta = s_acos(s_fabs( x/fTmpDis )) * 180.0f / PI;
		if (x > 0){ // 1 or 4
			if (y >= 0){	// 1사분면
				dir = 90.0f + (-1.0f)*beta;
			}
			else{		// 4사분면
				dir = 90.0f + beta;
			}
		}
		else if (x < 0){ // 2 or 3
			if (y >= 0){ // 2
				dir = (-1.0f)*(90.0f + (-1)*beta);
			}
			else{ //3
				dir = (-1.0f)*(90.0f + beta);
			}
		}
	}
	else
	{
		if (y >= 0)			// front
		{
			dir = 0.0f;
		}
		else						// back
		{
			dir = 180.0f;
		}
	}

	return dir;
}

int nxpROUND(float num)
{
	if (((int)(num * 10) % 10) >= 5)
		return (int)num + 1;
	else
		return (int)num;
}

VECT getVector(LF_DATA lf_data)
{
	int disA, disB;
	VECT target = { 0, };
	int width = 0;
	int chkTri = 0;

	// get distance from lf data
	// same dimension
//	disA = (int) lf_data.firstAnt_Dis;
//	disB = (int) lf_data.secondAnt_Dis;

	// waist - 3D dimension
	disA = nxpROUND(s_sqrt(lf_data.firstAnt_Dis*lf_data.firstAnt_Dis - HEIGHT_DELTA*HEIGHT_DELTA));
	disB = nxpROUND(s_sqrt(lf_data.secondAnt_Dis*lf_data.secondAnt_Dis - HEIGHT_DELTA*HEIGHT_DELTA));

	// get width from constant
	width = DIS_WIDTH;

	// triangle configuration check ok? if ok, return 0
	chkTri = checkTriGeneral(disA, disB, width);
	if (chkTri)
	{
		width += chkTri;
	}

	// calc vect
	target = calcTriangle(disA, disB, width);

	// print calculated vector
//	printf("disA: %3d, disB :%3d - ", disA, disB);
//	printf("x:%d, y:%d, dis:%d, dir:%d\n\r", nxpROUND(target.x), nxpROUND(target.y), target.distance, target.direction);

	return target;
}
