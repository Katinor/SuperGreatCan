/*
 * lib_sensor.h
 *
 *  Created on: 2015. 7. 8.
 *      Author: minsu
 */

#ifndef APPLICATION_LIB_SENSOR_ITF_LIB_SENSOR_H_
#define APPLICATION_LIB_SENSOR_ITF_LIB_SENSOR_H_


#include <stdio.h>
#include <stdint.h>

/** @define RCX sensor(00) configuration */
#define   SEN_CON_00   (1<<5)
/** @define RCX sensor(01) configuration */
#define   SEN_CON_01   (1<<6)
/** @define RCX sensor(02) configuration */
#define   SEN_CON_02   (1<<7)
/** @define RCX sensor(03) configuration */
#define   SEN_CON_03   (1<<8)

/** @define NXT sensor configuration */
/** @define HJ for DIGIA0 */
#define NXT_CON_00   (1<<0)
/** @define HJ for DIGIA1 */
#define NXT_CON_10   (1<<9)
/** @define HJ for DIGIB0 */
#define NXT_CON_01   (1<<10)
/** @define HJ for DIGIB1 */
#define NXT_CON_11   (1<<11)
/** @define HJ for DIGIC0 */
#define NXT_CON_02   (1<<13)
/** @define HJ for DIGIC1 */
#define NXT_CON_12   (1<<14)
/** @define HJ for DIGID0 */
#define NXT_CON_03   (1<<16)
/** @define HJ for DIGID1 */
#define NXT_CON_13   (1<<17)

/** @define NXT_SENSOR mask configuration */
#define NXT_MASK   (NXT_CON_00|NXT_CON_01|NXT_CON_02|NXT_CON_03|NXT_CON_10|NXT_CON_11|NXT_CON_12|NXT_CON_13)
/** @define SEN_SENSOR mask configuration */
#define   SEN_MASK   (SEN_CON_00|SEN_CON_01|SEN_CON_02|SEN_CON_03)

/** @define NXT 센서 타입 */
#define NXT_SENSOR               0x0200
/** @define NXT_TOUCH 센서 */
#define NXT_SENSOR_TOUCH         0x0201
/** @define NXT_LIGHT 센서 */
#define NXT_SENSOR_LIGHT         0x0202
/** @define NXT_SOUND 센서 */
#define NXT_SENSOR_SOUND         0x0203
/** @define NXT_GYRO 센서 */
#define NXT_SENSOR_GYRO            0x0204

/** @define NXT_DIGITAL 센서 타입 */
#define NXT_DIGITAL_SENSOR         0x0300
/** @define NXT_DIGITAL_ACCEL 센서 */
#define NXT_DIGITAL_SENSOR_ACCEL   0x0301
/** @define NXT_DIGITAL_SONA 센서 */
#define NXT_DIGITAL_SENSOR_SONA      0x0302

#define EV3_IMU_SENSOR            0x0303

#define EV3_LINE_FOLLOWER_SENSOR   0x0304

#define EV3_TEMPERATURE_SENSOR   0x0305

/** @define 센서 타입 마스크 */
#define ESTK_SENSOR_TYPE_MASK      0x0F00
/** @define ESTK 센서 포트 사이즈 */
#define ESTK_SENSOR_PORT_SIZE      4

// IMU Mode select
#define IMU_GYRO_ONLY            0
#define IMU_ACC_ONLY            1
#define IMU_CMPS_ONLY            2

// Line Follower Mode select
#define LINE_PID         0   // Line Follower default
#define   LINE_PID_ALL      1   // Line Follower - all values
#define   LINE_CAL         2   // Calibrated values
//#define   LINE_RAW         3   // Uncalibrated values

// Temperature Mode select
#define TEMP_AMBI_C	0
#define TEMP_TARG_C	1
#define TEMP_AMBI_F	2
#define TEMP_TARG_F 3
#define TEMP_C		4
#define TEMP_F		5
#define TEMP_ALL	6


// IMU Gyro Sensitivity
#define DEGREE_250               0.00875
#define DEGREE_500               0.0175
#define DEGREE_2000               0.07

/**
 * \struct magnetic_field
 Magnetic Field related data
 */
typedef struct magnetic_field_
{
    short mx_h;    /*!<Magnetic field HSB x-axis value generated by AbsoluteIMU */
   short mx_l;    /*!<Magnetic field LSB x-axis value generated by AbsoluteIMU */
   short my_h;    /*!<Magnetic field HSB y-axis value generated by AbsoluteIMU */
   short my_l;    /*!<Magnetic field LSB y-axis value generated by AbsoluteIMU */
   short mz_h;    /*!<Magnetic field HSB z-axis value generated by AbsoluteIMU */
   short mz_l;    /*!<Magnetic field LSB z-axis value generated by AbsoluteIMU */

  int   mx;       /*!<Magnetic field x-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int   my;       /*!<Magnetic field y-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int   mz;       /*!<Magnetic field z-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int   error;       /*!<Error generated in case of communication breakdown */
}magnetic_field;

/**
 * \struct gyro
 Gyroscope related data
 */
typedef struct gyro_
{
   short gx_h;    /*!<Gyroscope HSB x-axis value generated by AbsoluteIMU */
   short gx_l;    /*!<Gyroscope LSB x-axis value generated by AbsoluteIMU */
   short gy_h;    /*!<Gyroscope HSB y-axis value generated by AbsoluteIMU */
   short gy_l;    /*!<Gyroscope LSB y-axis value generated by AbsoluteIMU */
   short gz_h;    /*!<Gyroscope HSB z-axis value generated by AbsoluteIMU */
   short gz_l;    /*!<Gyroscope LSB z-axis value generated by AbsoluteIMU */

  int   gx;      /*!<Gyroscope x-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int   gy;      /*!<Gyroscope y-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int   gz;      /*!<Gyroscope z-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int error;      /*!<Error generated in case of communication breakdown */
}gyro;

/**
 * \struct accl
 Accelerometer and Tilt related data
 */
typedef struct accl_
{
   short  tx ;    /*!<Tilt x-axis value generated by AbsoluteIMU */
   short  ty;    /*!<Tilt y-axis value generated by AbsoluteIMU */
   short  tz;    /*!<Tilt z-axis value generated by AbsoluteIMU */

   short ax_h;    /*!<Accelerometer HSB x-axis value generated by AbsoluteIMU */
   short ax_l;    /*!<Accelerometer LSB x-axis value generated by AbsoluteIMU */
   short ay_h;    /*!<Accelerometer HSB y-axis value generated by AbsoluteIMU */
   short ay_l;    /*!<Accelerometer LSB y-axis value generated by AbsoluteIMU */
   short az_h;    /*!<Accelerometer HSB z-axis value generated by AbsoluteIMU */
   short az_l;    /*!<Accelerometer LSB z-axis value generated by AbsoluteIMU */

  int   ax;      /*!<Accelerometer x-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int   ay;      /*!<Accelerometer y-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int   az;      /*!<Accelerometer z-axis value derived from HSB and LSB values generated by AbsoluteIMU */
  int error;      /*!<Error generated in case of communication breakdown */
}accl;

typedef   struct line_
{
   int steering ;
   int avg ;
   int result ;

   int led_0 ;
   int led_1 ;
   int led_2 ;
   int led_3 ;
   int led_4 ;
   int led_5 ;
   int led_6 ;
   int led_7 ;
}line;

typedef struct tempe_
{
	int c_ambi ;
	int c_targ ;

	int f_ambi ;
	int f_targ ;
}tempe;
/**
 * \struct cmps
 Compass related data
 */
typedef struct cmps_
{
  int heading;      /*!<Compass value derived from HSB and LSB values generated by AbsoluteIMU */

     short heading_h;   /*!<Compass HSB value generated by AbsoluteIMU */
   short heading_l;   /*!<Compass LSB value generated by AbsoluteIMU */

  int error;      /*!<Error generated in case of communication breakdown */
}cmps;

void lib_sensor_component_init( void );

void sensor_init(unsigned short port0_sensor_type, unsigned short port1_sensor_type,
      unsigned short port2_sensor_type, unsigned short port3_sensor_type);

int sensor_get(char port);
void set_digital_sensor(unsigned char port);

/*IMU*/

/*IMU Mode Select !
 *mode 1 : GYRO
 *mode 2 : ACC
 *mode 3 : COMP
 */
void modeSelectIMU(int mode);

/* Line Mode Select !
 * mode 1 : PID
 * mode 2 : PID-ALL
 * mode 3 : CAL
 * mode 4 : RAW
 */
void modeSelectLine( int mode ) ;

/* Temperature Mode Select !
 * mode 1 : AMBI_TEMPC : Ambient Temperature ( 주위 온도 ) Celsius ( 섭씨 )
 * mode 2 : TARG_TEMPC : Target Temperature Celsius
 * mode 3 : AMBI_TEMPF : Ambient Temperature ( 주위 온도 ) Fahrenheit ( 화씨 )
 * mode 4 : TARG_TEMPF : Target Temperature Fahrenheit
 * mode 5 : TEMP_CELSIUS : Temperature Celsius ( Ambient + Target 같이 불러옴 )
 * mode 6 : TEMP_FAHRENHEIT : Temperature Fahrenheit ( Ambient + Target 같이 불러옴 )
 */
void modeSelectTemp( int mode ) ;

//gyro, accl  structure init function
//sensor init() 내부에서 call함
//user가 사용 x
void initIMU();

//Get IMU Data
//Application에서는 이 함수 호출로 sensor 값을 받아온다.
void getGyro(char port, int *gyro_val_array);
void getACC(char port, int *acc_val_array);

//Get Line Data
// Application에서는 이 함수 호출로 sensor 값을 받아온다.
void line_get( char port, int *line_val_array ) ;

//Get Temperature Data
// Application에서는 이 함수 호출로 sensor 값을 받아온다
void temp_get( char port, int *temp_val_array ) ;

//ReadIMU Sensor Data using I2C
void getIMUgyroVal(unsigned char port);
void getIMUaccVal(unsigned char port);
int twoComplement(int val);

// ReadLine sensor Data using I2C
void getLineVal( unsigned char port ) ;
// Read Temperature sensor Data using I2C
void getTempVal( unsigned char port ) ;

#endif /* APPLICATION_LIB_SENSOR_ITF_LIB_SENSOR_H_ */
